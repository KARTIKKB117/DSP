class DNode:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def insert_at_beginning(self, data):
        new = DNode(data)
        new.next = self.head
        if self.head:
            self.head.prev = new
        self.head = new

    def insert_at_end(self, data):
        new = DNode(data)
        if not self.head:
            self.head = new
            return
        cur = self.head
        while cur.next:
            cur = cur.next
        cur.next = new
        new.prev = cur

    def delete_at_beginning(self):
        if not self.head:
            print("List empty")
            return
        self.head = self.head.next
        if self.head:
            self.head.prev = None

    def delete_at_end(self):
        if not self.head:
            print("List empty")
            return
        if not self.head.next:
            self.head = None
            return
        cur = self.head
        while cur.next:
            cur = cur.next
        cur.prev.next = None

    def display(self):
        cur = self.head
        while cur:
            print(cur.data, end=" <-> ")
            cur = cur.next
        print("None")


# Demo
print("\n--- Doubly Linked List ---")
dll = DoublyLinkedList()
dll.insert_at_end(10)
dll.insert_at_beginning(5)
dll.insert_at_end(20)
dll.display()      # 5 <-> 10 <-> 20 <-> None
dll.delete_at_beginning()
dll.display()      # 10 <-> 20 <-> None
dll.delete_at_end()
dll.display()      # 10 <-> None